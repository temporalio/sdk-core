// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.sdk.v1;

option go_package = "go.temporal.io/api/sdk/v1;sdk";
option java_package = "io.temporal.api.sdk.v1";
option java_multiple_files = true;
option java_outer_classname = "PollerScalingProto";
option ruby_package = "Temporalio::Api::Sdk::V1";
option csharp_namespace = "Temporalio.Api.Sdk.V1";

message PollerScalingDecision {
  // TODO: enum DecisionMaker [root, partition] needed?
  // TODO: Doesn't necessarily have to be its own message if we don't put more
  //   in here

  // Values may be [-1, 0, 1] - whether to decrease or increase the number of
  // pollers. Could allow for bigger values as well.
  int32 poller_delta = 1;

  // TODO: Kept just for debugging right now, remove if not useful for scaling
  // 0 for root
  int32 partition_num = 2;

  // TODO: Kept just for debugging right now, remove if not useful for scaling
  enum DecisionReason {
    DECISION_REASON_UNSPECIFIED = 0;
    DECISION_REASON_BACKLOG = 1;
    DECISION_REASON_SYNC_MATCH = 2;
    DECISION_REASON_DISPATCH_RATE_UP = 3;
    DECISION_REASON_DISPATCH_RATE_DOWN = 4;
  }
  DecisionReason reason = 3;
}
