// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.history.v1;

option go_package = "go.temporal.io/api/history/v1;history";
option java_package = "io.temporal.api.history.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporal::Api::History::V1";
option csharp_namespace = "Temporal.Api.History.V1";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "dependencies/gogoproto/gogo.proto";

import "temporal/api/enums/v1/event_type.proto";
import "temporal/api/enums/v1/failed_cause.proto";
import "temporal/api/enums/v1/workflow.proto";
import "temporal/api/common/v1/message.proto";
import "temporal/api/failure/v1/message.proto";
import "temporal/api/workflow/v1/message.proto";
import "temporal/api/taskqueue/v1/message.proto";

message WorkflowExecutionStartedEventAttributes {
    temporal.api.common.v1.WorkflowType workflow_type = 1;
    string parent_workflow_namespace = 2;
    temporal.api.common.v1.WorkflowExecution parent_workflow_execution = 3;
    int64 parent_initiated_event_id = 4;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 5;
    temporal.api.common.v1.Payloads input = 6;
    // Total workflow execution timeout including retries and continue as new.
    google.protobuf.Duration workflow_execution_timeout = 7 [(gogoproto.stdduration) = true];
    // Timeout of a single workflow run.
    google.protobuf.Duration workflow_run_timeout = 8 [(gogoproto.stdduration) = true];
    // Timeout of a single workflow task.
    google.protobuf.Duration workflow_task_timeout = 9 [(gogoproto.stdduration) = true];
    // Run id of previous ContinueAsNew or retry or cron execution.
    string continued_execution_run_id = 10;
    temporal.api.enums.v1.ContinueAsNewInitiator initiator = 11;
    temporal.api.failure.v1.Failure continued_failure = 12;
    temporal.api.common.v1.Payloads last_completion_result = 13;
    // This is the runId when the WorkflowExecutionStarted event is written.
    string original_execution_run_id = 14;
    string identity = 15;
    // This is the very first runId along the chain of ContinueAsNew and Reset.
    string first_execution_run_id = 16;
    temporal.api.common.v1.RetryPolicy retry_policy = 17;
    int32 attempt = 18;
    // The absolute time at which workflow is timed out.
    // This time is passed without change to the next run/retry of a workflow.
    google.protobuf.Timestamp workflow_execution_expiration_time = 19 [(gogoproto.stdtime) = true];
    string cron_schedule = 20;
    google.protobuf.Duration first_workflow_task_backoff = 21 [(gogoproto.stdduration) = true];
    temporal.api.common.v1.Memo memo = 22;
    temporal.api.common.v1.SearchAttributes search_attributes = 23;
    temporal.api.workflow.v1.ResetPoints prev_auto_reset_points = 24;
    temporal.api.common.v1.Header header = 25;
}

message WorkflowExecutionCompletedEventAttributes {
    temporal.api.common.v1.Payloads result = 1;
    int64 workflow_task_completed_event_id = 2;
    // If another run is started by cron, this contains the new run id.
    string new_execution_run_id = 3;
}

message WorkflowExecutionFailedEventAttributes {
    temporal.api.failure.v1.Failure failure = 1;
    temporal.api.enums.v1.RetryState retry_state = 2;
    int64 workflow_task_completed_event_id = 3;
    // If another run is started by cron or retry, this contains the new run id.
    string new_execution_run_id = 4;
}

message WorkflowExecutionTimedOutEventAttributes {
    temporal.api.enums.v1.RetryState retry_state = 1;
    // If another run is started by cron or retry, this contains the new run id.
    string new_execution_run_id = 2;
}

message WorkflowExecutionContinuedAsNewEventAttributes {
    string new_execution_run_id = 1;
    temporal.api.common.v1.WorkflowType workflow_type = 2;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 3;
    temporal.api.common.v1.Payloads input = 4;
    // workflow_execution_timeout is omitted as it shouldn'be overridden from within a workflow.
    // Timeout of a single workflow run.
    google.protobuf.Duration workflow_run_timeout = 5 [(gogoproto.stdduration) = true];
    // Timeout of a single workflow task.
    google.protobuf.Duration workflow_task_timeout = 6 [(gogoproto.stdduration) = true];
    int64 workflow_task_completed_event_id = 7;
    google.protobuf.Duration backoff_start_interval = 8 [(gogoproto.stdduration) = true];
    temporal.api.enums.v1.ContinueAsNewInitiator initiator = 9;
    temporal.api.failure.v1.Failure failure = 10;
    temporal.api.common.v1.Payloads last_completion_result = 11;
    temporal.api.common.v1.Header header = 12;
    temporal.api.common.v1.Memo memo = 13;
    temporal.api.common.v1.SearchAttributes search_attributes = 14;
}

message WorkflowTaskScheduledEventAttributes {
    temporal.api.taskqueue.v1.TaskQueue task_queue = 1;
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "to" is used to indicate interval. --)
    google.protobuf.Duration start_to_close_timeout = 2 [(gogoproto.stdduration) = true];
    int32 attempt = 3;
}

message WorkflowTaskStartedEventAttributes {
    int64 scheduled_event_id = 1;
    string identity = 2;
    string request_id = 3;
}

message WorkflowTaskCompletedEventAttributes {
    int64 scheduled_event_id = 1;
    int64 started_event_id = 2;
    string identity = 3;
    string binary_checksum = 4;
}

message WorkflowTaskTimedOutEventAttributes {
    int64 scheduled_event_id = 1;
    int64 started_event_id = 2;
    temporal.api.enums.v1.TimeoutType timeout_type = 3;
}

message WorkflowTaskFailedEventAttributes {
    int64 scheduled_event_id = 1;
    int64 started_event_id = 2;
    temporal.api.enums.v1.WorkflowTaskFailedCause cause = 3;
    temporal.api.failure.v1.Failure failure = 4;
    string identity = 5;
    // For reset workflow.
    string base_run_id = 6;
    string new_run_id = 7;
    int64 fork_event_version = 8;
    string binary_checksum = 9;
}

message ActivityTaskScheduledEventAttributes {
    string activity_id = 1;
    temporal.api.common.v1.ActivityType activity_type = 2;
    string namespace = 3;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 4;
    temporal.api.common.v1.Header header = 5;
    temporal.api.common.v1.Payloads input = 6;
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "to" is used to indicate interval. --)
    // Indicates how long the caller is willing to wait for an activity completion.
    // Limits for how long retries are happening. Either this or start_to_close_timeout_seconds must be specified.
    google.protobuf.Duration schedule_to_close_timeout = 7 [(gogoproto.stdduration) = true];
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "to" is used to indicate interval. --)
    // Limits time an activity task can stay in a task queue before a worker picks it up.
    // This timeout is always non retryable as all a retry would achieve is to put it back into the same queue.
    // Defaults to schedule_to_close_timeout_seconds or workflow execution timeout if not specified.
    google.protobuf.Duration schedule_to_start_timeout = 8 [(gogoproto.stdduration) = true];
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "to" is used to indicate interval. --)
    // Maximum time an activity is allowed to execute after a pick up by a worker.
    // This timeout is always retryable. Either this or schedule_to_close_timeout_seconds must be specified.
    google.protobuf.Duration start_to_close_timeout = 9 [(gogoproto.stdduration) = true];
    // Maximum time between successful worker heartbeats.
    google.protobuf.Duration heartbeat_timeout = 10 [(gogoproto.stdduration) = true];
    int64 workflow_task_completed_event_id = 11;
    // Activities are provided by a default retry policy controlled through the service dynamic configuration.
    // Retries are happening up to schedule_to_close_timeout.
    // To disable retries set retry_policy.maximum_attempts to 1.
    temporal.api.common.v1.RetryPolicy retry_policy = 12;
}

message ActivityTaskStartedEventAttributes {
    int64 scheduled_event_id = 1;
    string identity = 2;
    string request_id = 3;
    int32 attempt = 4;
    temporal.api.failure.v1.Failure last_failure = 5;
}

message ActivityTaskCompletedEventAttributes {
    temporal.api.common.v1.Payloads result = 1;
    int64 scheduled_event_id = 2;
    int64 started_event_id = 3;
    string identity = 4;
}

message ActivityTaskFailedEventAttributes {
    temporal.api.failure.v1.Failure failure = 1;
    int64 scheduled_event_id = 2;
    int64 started_event_id = 3;
    string identity = 4;
    temporal.api.enums.v1.RetryState retry_state = 5;
}

message ActivityTaskTimedOutEventAttributes {
    // For retry activity, it may have a failure before timeout. It is stored as `cause` in `failure`.
    temporal.api.failure.v1.Failure failure = 1;
    int64 scheduled_event_id = 2;
    int64 started_event_id = 3;
    temporal.api.enums.v1.RetryState retry_state = 4;
}

message ActivityTaskCancelRequestedEventAttributes {
    int64 scheduled_event_id = 1;
    int64 workflow_task_completed_event_id = 2;
}

message ActivityTaskCanceledEventAttributes {
    temporal.api.common.v1.Payloads details = 1;
    int64 latest_cancel_requested_event_id = 2;
    int64 scheduled_event_id = 3;
    int64 started_event_id = 4;
    string identity = 5;
}

message TimerStartedEventAttributes {
    string timer_id = 1;
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "to" is used to indicate interval. --)
    google.protobuf.Duration start_to_fire_timeout = 2 [(gogoproto.stdduration) = true];
    int64 workflow_task_completed_event_id = 3;
}

message TimerFiredEventAttributes {
    string timer_id = 1;
    int64 started_event_id = 2;
}

message TimerCanceledEventAttributes {
    string timer_id = 1;
    int64 started_event_id = 2;
    int64 workflow_task_completed_event_id = 3;
    string identity = 4;
}

message WorkflowExecutionCancelRequestedEventAttributes {
    string cause = 1;
    int64 external_initiated_event_id = 2;
    temporal.api.common.v1.WorkflowExecution external_workflow_execution = 3;
    string identity = 4;
}

message WorkflowExecutionCanceledEventAttributes {
    int64 workflow_task_completed_event_id = 1;
    temporal.api.common.v1.Payloads details = 2;
}

message MarkerRecordedEventAttributes {
    string marker_name = 1;
    map<string, temporal.api.common.v1.Payloads> details = 2;
    int64 workflow_task_completed_event_id = 3;
    temporal.api.common.v1.Header header = 4;
    temporal.api.failure.v1.Failure failure = 5;
}

message WorkflowExecutionSignaledEventAttributes {
    string signal_name = 1;
    temporal.api.common.v1.Payloads input = 2;
    string identity = 3;
}

message WorkflowExecutionTerminatedEventAttributes {
    string reason = 1;
    temporal.api.common.v1.Payloads details = 2;
    string identity = 3;
}

message RequestCancelExternalWorkflowExecutionInitiatedEventAttributes {
    int64 workflow_task_completed_event_id = 1;
    string namespace = 2;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 3;
    string control = 4;
    bool child_workflow_only = 5;
}

message RequestCancelExternalWorkflowExecutionFailedEventAttributes {
    temporal.api.enums.v1.CancelExternalWorkflowExecutionFailedCause cause = 1;
    int64 workflow_task_completed_event_id = 2;
    string namespace = 3;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 4;
    int64 initiated_event_id = 5;
    string control = 6;
}

message ExternalWorkflowExecutionCancelRequestedEventAttributes {
    int64 initiated_event_id = 1;
    string namespace = 2;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 3;
}

message SignalExternalWorkflowExecutionInitiatedEventAttributes {
    int64 workflow_task_completed_event_id = 1;
    string namespace = 2;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 3;
    string signal_name = 4;
    temporal.api.common.v1.Payloads input = 5;
    string control = 6;
    bool child_workflow_only = 7;
}

message SignalExternalWorkflowExecutionFailedEventAttributes {
    temporal.api.enums.v1.SignalExternalWorkflowExecutionFailedCause cause = 1;
    int64 workflow_task_completed_event_id = 2;
    string namespace = 3;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 4;
    int64 initiated_event_id = 5;
    string control = 6;
}

message ExternalWorkflowExecutionSignaledEventAttributes {
    int64 initiated_event_id = 1;
    string namespace = 2;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 3;
    string control = 4;
}

message UpsertWorkflowSearchAttributesEventAttributes {
    int64 workflow_task_completed_event_id = 1;
    temporal.api.common.v1.SearchAttributes search_attributes = 2;
}

message StartChildWorkflowExecutionInitiatedEventAttributes {
    string namespace = 1;
    string workflow_id = 2;
    temporal.api.common.v1.WorkflowType workflow_type = 3;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 4;
    temporal.api.common.v1.Payloads input = 5;
    // Total workflow execution timeout including retries and continue as new.
    google.protobuf.Duration workflow_execution_timeout = 6 [(gogoproto.stdduration) = true];
    // Timeout of a single workflow run.
    google.protobuf.Duration workflow_run_timeout = 7 [(gogoproto.stdduration) = true];
    // Timeout of a single workflow task.
    google.protobuf.Duration workflow_task_timeout = 8 [(gogoproto.stdduration) = true];
    // Default: PARENT_CLOSE_POLICY_TERMINATE.
    temporal.api.enums.v1.ParentClosePolicy parent_close_policy = 9;
    string control = 10;
    int64 workflow_task_completed_event_id = 11;
    // Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
    temporal.api.enums.v1.WorkflowIdReusePolicy workflow_id_reuse_policy = 12;
    temporal.api.common.v1.RetryPolicy retry_policy = 13;
    string cron_schedule = 14;
    temporal.api.common.v1.Header header = 15;
    temporal.api.common.v1.Memo memo = 16;
    temporal.api.common.v1.SearchAttributes search_attributes = 17;
}

message StartChildWorkflowExecutionFailedEventAttributes {
    string namespace = 1;
    string workflow_id = 2;
    temporal.api.common.v1.WorkflowType workflow_type = 3;
    temporal.api.enums.v1.StartChildWorkflowExecutionFailedCause cause = 4;
    string control = 5;
    int64 initiated_event_id = 6;
    int64 workflow_task_completed_event_id = 7;
}

message ChildWorkflowExecutionStartedEventAttributes {
    string namespace = 1;
    int64 initiated_event_id = 2;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 3;
    temporal.api.common.v1.WorkflowType workflow_type = 4;
    temporal.api.common.v1.Header header = 5;
}

message ChildWorkflowExecutionCompletedEventAttributes {
    temporal.api.common.v1.Payloads result = 1;
    string namespace = 2;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 3;
    temporal.api.common.v1.WorkflowType workflow_type = 4;
    int64 initiated_event_id = 5;
    int64 started_event_id = 6;
}

message ChildWorkflowExecutionFailedEventAttributes {
    temporal.api.failure.v1.Failure failure = 1;
    string namespace = 2;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 3;
    temporal.api.common.v1.WorkflowType workflow_type = 4;
    int64 initiated_event_id = 5;
    int64 started_event_id = 6;
    temporal.api.enums.v1.RetryState retry_state = 7;
}

message ChildWorkflowExecutionCanceledEventAttributes {
    temporal.api.common.v1.Payloads details = 1;
    string namespace = 2;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 3;
    temporal.api.common.v1.WorkflowType workflow_type = 4;
    int64 initiated_event_id = 5;
    int64 started_event_id = 6;
}

message ChildWorkflowExecutionTimedOutEventAttributes {
    string namespace = 1;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 2;
    temporal.api.common.v1.WorkflowType workflow_type = 3;
    int64 initiated_event_id = 4;
    int64 started_event_id = 5;
    temporal.api.enums.v1.RetryState retry_state = 6;
}

message ChildWorkflowExecutionTerminatedEventAttributes {
    string namespace = 1;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 2;
    temporal.api.common.v1.WorkflowType workflow_type = 3;
    int64 initiated_event_id = 4;
    int64 started_event_id = 5;
}

message HistoryEvent {
    int64 event_id = 1;
    google.protobuf.Timestamp event_time = 2 [(gogoproto.stdtime) = true];
    temporal.api.enums.v1.EventType event_type = 3;
    int64 version = 4;
    int64 task_id = 5;
    oneof attributes {
        WorkflowExecutionStartedEventAttributes workflow_execution_started_event_attributes = 6;
        WorkflowExecutionCompletedEventAttributes workflow_execution_completed_event_attributes = 7;
        WorkflowExecutionFailedEventAttributes workflow_execution_failed_event_attributes = 8;
        WorkflowExecutionTimedOutEventAttributes workflow_execution_timed_out_event_attributes = 9;
        WorkflowTaskScheduledEventAttributes workflow_task_scheduled_event_attributes = 10;
        WorkflowTaskStartedEventAttributes workflow_task_started_event_attributes = 11;
        WorkflowTaskCompletedEventAttributes workflow_task_completed_event_attributes = 12;
        WorkflowTaskTimedOutEventAttributes workflow_task_timed_out_event_attributes = 13;
        WorkflowTaskFailedEventAttributes workflow_task_failed_event_attributes = 14;
        ActivityTaskScheduledEventAttributes activity_task_scheduled_event_attributes = 15;
        ActivityTaskStartedEventAttributes activity_task_started_event_attributes = 16;
        ActivityTaskCompletedEventAttributes activity_task_completed_event_attributes = 17;
        ActivityTaskFailedEventAttributes activity_task_failed_event_attributes = 18;
        ActivityTaskTimedOutEventAttributes activity_task_timed_out_event_attributes = 19;
        TimerStartedEventAttributes timer_started_event_attributes = 20;
        TimerFiredEventAttributes timer_fired_event_attributes = 21;
        ActivityTaskCancelRequestedEventAttributes activity_task_cancel_requested_event_attributes = 22;
        ActivityTaskCanceledEventAttributes activity_task_canceled_event_attributes = 23;
        TimerCanceledEventAttributes timer_canceled_event_attributes = 24;
        MarkerRecordedEventAttributes marker_recorded_event_attributes = 25;
        WorkflowExecutionSignaledEventAttributes workflow_execution_signaled_event_attributes = 26;
        WorkflowExecutionTerminatedEventAttributes workflow_execution_terminated_event_attributes = 27;
        WorkflowExecutionCancelRequestedEventAttributes workflow_execution_cancel_requested_event_attributes = 28;
        WorkflowExecutionCanceledEventAttributes workflow_execution_canceled_event_attributes = 29;
        RequestCancelExternalWorkflowExecutionInitiatedEventAttributes request_cancel_external_workflow_execution_initiated_event_attributes = 30;
        RequestCancelExternalWorkflowExecutionFailedEventAttributes request_cancel_external_workflow_execution_failed_event_attributes = 31;
        ExternalWorkflowExecutionCancelRequestedEventAttributes external_workflow_execution_cancel_requested_event_attributes = 32;
        WorkflowExecutionContinuedAsNewEventAttributes workflow_execution_continued_as_new_event_attributes = 33;
        StartChildWorkflowExecutionInitiatedEventAttributes start_child_workflow_execution_initiated_event_attributes = 34;
        StartChildWorkflowExecutionFailedEventAttributes start_child_workflow_execution_failed_event_attributes = 35;
        ChildWorkflowExecutionStartedEventAttributes child_workflow_execution_started_event_attributes = 36;
        ChildWorkflowExecutionCompletedEventAttributes child_workflow_execution_completed_event_attributes = 37;
        ChildWorkflowExecutionFailedEventAttributes child_workflow_execution_failed_event_attributes = 38;
        ChildWorkflowExecutionCanceledEventAttributes child_workflow_execution_canceled_event_attributes = 39;
        ChildWorkflowExecutionTimedOutEventAttributes child_workflow_execution_timed_out_event_attributes = 40;
        ChildWorkflowExecutionTerminatedEventAttributes child_workflow_execution_terminated_event_attributes = 41;
        SignalExternalWorkflowExecutionInitiatedEventAttributes signal_external_workflow_execution_initiated_event_attributes = 42;
        SignalExternalWorkflowExecutionFailedEventAttributes signal_external_workflow_execution_failed_event_attributes = 43;
        ExternalWorkflowExecutionSignaledEventAttributes external_workflow_execution_signaled_event_attributes = 44;
        UpsertWorkflowSearchAttributesEventAttributes upsert_workflow_search_attributes_event_attributes = 45;
    }
}

message History {
    repeated HistoryEvent events = 1;
}
