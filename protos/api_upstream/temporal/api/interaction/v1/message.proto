// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.interaction.v1;

option go_package = "go.temporal.io/api/interaction/v1;interaction";
option java_package = "io.temporal.api.interaction.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporalio::Api::Interaction::V1";
option csharp_namespace = "Temporalio.Api.Interaction.V1";

import "temporal/api/common/v1/message.proto";
import "temporal/api/failure/v1/message.proto";
import "temporal/api/enums/v1/interaction_type.proto";

// Meta carries metadata about an interaction for use by the system (i.e. not
// generall user-visible)
message Meta {
    // An ID with workflow-scoped uniqueness for this interaction
    string id = 1;

    // The event ID after which this interaction can execute. The effects of
    // history up to and including this event ID should be visible to the
    // interaction when it executes.
    int64 event_id = 2;

    // The type of this interaction.
    temporal.api.enums.v1.InteractionType interaction_type = 3;

    // A string identifying the agent that requested this interaction.
    string identity = 4;

    string request_id = 5;
}

// Input carries interaction input that comes from the caller.
message Input {
    // Headers that are passed with the interaction to and from the processing workflow.
    // These can include things like auth or tracing tokens.
    temporal.api.common.v1.Header header = 1;

    // The name of the input handler to invoke on the target workflow
    string name = 2;

    // The arguments to pass to the named handler.
    temporal.api.common.v1.Payloads args = 3;
}


// Output carries the output data from an interaction.
message Output {
    // Headers that are passed with the interaction to and from the processing workflow.
    // These can include things like auth or tracing tokens.
    temporal.api.common.v1.Header header = 1;

    oneof result {
        temporal.api.common.v1.Payloads success = 2;
        temporal.api.failure.v1.Failure failure = 3;
    }
}

message Invocation {
    Meta meta = 1;
    Input input = 2;
}
