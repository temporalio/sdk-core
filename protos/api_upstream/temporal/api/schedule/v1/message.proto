// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.schedule.v1;

option go_package = "go.temporal.io/api/schedule/v1;schedule";
option java_package = "io.temporal.api.schedule.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporal::Api::Schedule::V1";
option csharp_namespace = "Temporal.Api.Schedule.V1";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "dependencies/gogoproto/gogo.proto";

import "temporal/api/common/v1/message.proto";
import "temporal/api/enums/v1/schedule.proto";
import "temporal/api/workflow/v1/message.proto";

// CalendarSpec describes an event specification relative to the calendar,
// similar to a traditional cron specification. Each field can be one of:
//   *: matches always
//   x: matches when the field equals x
//   x/y : matches when the field equals x+n*y where n is an integer
//   x-z: matches when the field is between x and z inclusive
//   w,x,y,...: matches when the field is one of the listed values
// Each x, y, z, ... is either a decimal integer, or a month or day of week name
// or abbreviation (in the appropriate fields).
// A second in time matches if all fields match.
// Note that the special case that some cron implementations have for treating
// day_of_month and day_of_week as "or" instead of "and" when both are set is
// not implemented.
// day_of_week can accept 0 or 7 as Sunday
// TODO: add relative-to-end-of-month
// TODO: add nth day-of-week in month
message CalendarSpec {
    // Expression to match seconds. Default: 0
    string second = 1;
    // Expression to match minutes. Default: 0
    string minute = 2;
    // Expression to match hours. Default: 0
    string hour = 3;
    // Expression to match days of the month. Default: *
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: standard name of field --)
    string day_of_month = 4;
    // Expression to match months. Default: *
    string month = 5;
    // Expression to match years. Default: *
    string year = 6;
    // Expression to match days of the week. Default: *
    string day_of_week = 7;
}

// IntervalSpec matches times that can be expressed as:
// epoch + n * interval + phase
// where n is an integer.
// phase defaults to zero if missing. interval is required.
// Both interval and phase must be non-negative and are truncated to the nearest
// second before any calculations.
// For example, an interval of 1 hour with phase of zero would match every hour,
// on the hour. The same interval but a phase of 19 minutes would match every
// xx:19:00. An interval of 28 days with phase zero would match
// 2022-02-17T00:00:00Z (among other times). The same interval with a phase of 3
// days, 5 hours, and 23 minutes would match 2022-02-20T05:23:00Z instead.
message IntervalSpec {
    google.protobuf.Duration interval = 1 [(gogoproto.stdduration) = true];
    google.protobuf.Duration phase = 2 [(gogoproto.stdduration) = true];
}

// ScheduleSpec is a complete description of a set of absolute timestamps
// (possibly infinite) that an action should occur at. The meaning of a
// ScheduleSpec depends only on its contents and never changes, except that the
// definition of a time zone can change over time (most commonly, when daylight
// saving time policy changes for an area). To create a totally self-contained
// ScheduleSpec, use UTC or include timezone_data.
message ScheduleSpec {
    // Calendar-based specifications of times.
    repeated CalendarSpec calendar = 1;
    // Interval-based specifications of times.
    repeated IntervalSpec interval = 2;
    // Any timestamps matching any of the exclude_calendar specs will be
    // skipped.
    repeated CalendarSpec exclude_calendar = 3;
    // Any timestamps before start_time will be skipped. Together, start_time
    // and end_time make an inclusive interval.
    google.protobuf.Timestamp start_time = 4 [(gogoproto.stdtime) = true];
    // Any timestamps after end_time will be skipped.
    google.protobuf.Timestamp end_time = 5 [(gogoproto.stdtime) = true];
    // All timestamps will be incremented by a random value from 0 to this
    // amount of jitter. Default: 1 second
    google.protobuf.Duration jitter = 6 [(gogoproto.stdduration) = true];

    // Time zone to interpret all CalendarSpecs in.
    //
    // If unset, defaults to UTC. We recommend using UTC for your application if
    // at all possible, to avoid various surprising properties of time zones.
    //
    // Time zones may be provided by name, corresponding to names in the IANA
    // time zone database (see https://www.iana.org/time-zones). The definition
    // will be loaded by the Temporal server from the environment it runs in.
    //
    // If your application requires more control over the time zone definition
    // used, it may pass in a complete definition in the form of a TZif file
    // from the time zone database. If present, this will be used instead of
    // loading anything from the environment. You are then responsible for
    // updating timezone_data when the definition changes.
    //
    // Calendar spec matching is based on literal matching of the clock time
    // with no special handling of DST: if you write a calendar spec that fires
    // at 2:30am and specify a time zone that follows DST, that action will not
    // be triggered on the day that has no 2:30am. Similarly, an action that
    // fires at 1:30am will be triggered twice on the day that has two 1:30s.
    string timezone_name = 10;
    bytes timezone_data = 11;
}

message SchedulePolicies {
    // Policy for overlaps.
    // Note that this can be changed after a schedule has taken some actions, and we can't
    // provide 100% sensible semantics for all changes. The most confusing case would be
    // changes to/from ALLOW_ALL: with that policy multiple scheduled workflows can run
    // concurrently, but for all other policies only one can run at a time. Changing
    // between these two classes will leave all workflows with the other class alone.
    // E.g., if changing from ALLOW_ALL to CANCEL_OTHER, and there are workflows running,
    // those workflows will not be cancelled. If changing from ALLOW_ALL to SKIP with
    // workflows running, the running workflows will not cause the next action to be
    // skipped.
    temporal.api.enums.v1.ScheduleOverlapPolicy overlap_policy = 1;

    // Policy for catchups:
    // If the Temporal server misses an action due to one or more components
    // being down, and comes back up, the action will be run if the scheduled
    // time is within this window from the current time.
    // This value defaults to 60 seconds, and can't be less than 10 seconds.
    google.protobuf.Duration catchup_window = 2 [(gogoproto.stdduration) = true];

    // If true, and a workflow run fails or times out, turn on "paused".
    // This applies after retry policies: the full chain of retries must fail to
    // trigger a pause here.
    bool pause_on_failure = 3;
}

message ScheduleAction {
    oneof action {
        // All fields of NewWorkflowExecutionInfo are valid except for:
        // - workflow_id_reuse_policy
        // - cron_schedule
        // The workflow id of the started workflow may not match this exactly,
        // it may have a timestamp appended for uniqueness.
        temporal.api.workflow.v1.NewWorkflowExecutionInfo start_workflow = 1;
    }
}

message ScheduleActionResult {
    // Time that the action was taken (according to the schedule, including jitter).
    google.protobuf.Timestamp schedule_time = 1 [(gogoproto.stdtime) = true];

    // Time that the action was taken (real time).
    google.protobuf.Timestamp actual_time = 2 [(gogoproto.stdtime) = true];

    // If action was start_workflow:
    temporal.api.common.v1.WorkflowExecution start_workflow_result = 11;
}

message ScheduleState {
    // Informative human-readable message with contextual notes, e.g. the reason
    // a schedule is paused. The system may overwrite this message on certain
    // conditions, e.g. when pause-on-failure happens.
    string notes = 1;

    // If true, do not take any actions based on the schedule spec.
    bool paused = 2;

    // If limited_actions is true, decrement remaining_actions after each action, and do
    // not take any more scheduled actions if remaining_actions is zero. Actions may still
    // be taken by explicit request. Skipped actions (due to overlap policy) do not count
    // against remaining actions.
    bool limited_actions = 3;
    int64 remaining_actions = 4;
}

message TriggerImmediatelyRequest {
    // Override overlap policy for this one request.
    temporal.api.enums.v1.ScheduleOverlapPolicy overlap_policy = 1;
}

message BackfillRequest {
    // Time range to evaluate schedule in.
    google.protobuf.Timestamp start_time = 1 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp end_time = 2 [(gogoproto.stdtime) = true];
    // Override overlap policy for this request.
    temporal.api.enums.v1.ScheduleOverlapPolicy overlap_policy = 3;
}

message SchedulePatch {
    // If set, trigger one action immediately.
    TriggerImmediatelyRequest trigger_immediately = 1;

    // If set, runs though the specified time period(s) and takes actions as if that time
    // passed by right now, all at once. The overlap policy can be overridden for the
    // scope of the backfill.
    repeated BackfillRequest backfill_request = 2;

    // If set, change the state to paused or unpaused (respectively) and set the
    // notes field to the value of the string.
    string pause = 3;
    string unpause = 4;
}

message ScheduleInfo {
    // Number of actions taken so far.
    int64 action_count = 1;

    // Number of times a scheduled action was skipped due to missing the catchup window.
    int64 missed_catchup_window = 2;

    // Number of skipped actions due to overlap.
    int64 overlap_skipped = 3;

    // Currently-running workflows started by this schedule. (There might be
    // more than one if the overlap policy allows overlaps.)
    // Note that the run_ids in here are the original execution run ids as
    // started by the schedule. If the workflows retried, did continue-as-new,
    // or were reset, they might still be running but with a different run_id.
    repeated temporal.api.common.v1.WorkflowExecution running_workflows = 9;

    // Most recent ten actual action times (including manual triggers).
    repeated ScheduleActionResult recent_actions = 4;

    // Next ten scheduled action times.
    repeated google.protobuf.Timestamp future_action_times = 5 [(gogoproto.stdtime) = true];

    // Timestamps of schedule creation and last update.
    google.protobuf.Timestamp create_time = 6 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp update_time = 7 [(gogoproto.stdtime) = true];

    // Error for invalid schedule. If this is set, no actions will be taken.
    string invalid_schedule_error = 8;
}

message Schedule {
    ScheduleSpec spec = 1;
    ScheduleAction action = 2;
    SchedulePolicies policies = 3;
    ScheduleState state = 4;
}

// ScheduleListInfo is an abbreviated set of values from Schedule and ScheduleInfo
// that's returned in ListSchedules.
message ScheduleListInfo {
    // From spec:
    // Some fields are too large/unimportant for the purpose of listing, so we'll clear them
    // from this copy of spec: exclude_calendar, jitter, timezone_data.
    ScheduleSpec spec = 1;

    // From action:
    // Action is a oneof field, but we need to encode this in JSON and oneof fields don't work
    // well with JSON. If action is start_workflow, this is set:
    temporal.api.common.v1.WorkflowType workflow_type = 2;

    // From state:
    string notes = 3;
    bool paused = 4;

    // From info (maybe fewer entries):
    repeated ScheduleActionResult recent_actions = 5;
    repeated google.protobuf.Timestamp future_action_times = 6 [(gogoproto.stdtime) = true];
}

// ScheduleListEntry is returned by ListSchedules.
message ScheduleListEntry {
    string schedule_id = 1;
    temporal.api.common.v1.Memo memo = 2;
    temporal.api.common.v1.SearchAttributes search_attributes = 3;
    ScheduleListInfo info = 4;
}
