// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.operatorservice.v1;

option go_package = "go.temporal.io/api/operatorservice/v1;operatorservice";
option java_package = "io.temporal.api.operatorservice.v1";
option java_multiple_files = true;
option java_outer_classname = "RequestResponseProto";
option ruby_package = "Temporal::Api::OperatorService::V1";
option csharp_namespace = "Temporal.Api.OperatorService.V1";

import "dependencies/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "temporal/api/cluster/v1/message.proto";
import "temporal/api/common/v1/message.proto";
import "temporal/api/enums/v1/cluster.proto";
import "temporal/api/enums/v1/common.proto";
import "temporal/api/version/v1/message.proto";

// (-- Search Attribute --)

message AddSearchAttributesRequest {
    // Mapping between search attribute name and its IndexedValueType.
    map<string, temporal.api.enums.v1.IndexedValueType> search_attributes = 1;
}

message AddSearchAttributesResponse {
}

message RemoveSearchAttributesRequest {
    // Search attribute names to delete.
    repeated string search_attributes = 1;
}

message RemoveSearchAttributesResponse {
}

message ListSearchAttributesRequest {
}

message ListSearchAttributesResponse {
    // Mapping between custom (user-registered) search attribute name to its IndexedValueType.
    map<string, temporal.api.enums.v1.IndexedValueType> custom_attributes = 1;
    // Mapping between system (predefined) search attribute name to its IndexedValueType.
    map<string, temporal.api.enums.v1.IndexedValueType> system_attributes = 2;
    // Mapping from the attribute name to the visibility storage native type.
    map<string, string> storage_schema = 3;
}

// (-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
// (-- api-linter: core::0135::request-name-required=disabled
//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
message DeleteNamespaceRequest {
    string namespace = 1;
}

message DeleteNamespaceResponse {
    // Temporary namespace name that is used during reclaim resources step.
    string deleted_namespace = 1;
}

// (-- api-linter: core::0135::request-unknown-fields=disabled
//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
// (-- api-linter: core::0135::request-name-required=disabled
//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
message DeleteWorkflowExecutionRequest {
    string namespace = 1;
    // Workflow Execution to delete. If run_id is not specified, the latest one is used.
    temporal.api.common.v1.WorkflowExecution workflow_execution = 2;
}

message DeleteWorkflowExecutionResponse {
}

message AddOrUpdateRemoteClusterRequest {
    string frontend_address = 1;
    bool enable_remote_cluster_connection = 2;
}

message AddOrUpdateRemoteClusterResponse {
}

message RemoveRemoteClusterRequest {
    string cluster_name = 1;
}

message RemoveRemoteClusterResponse {
}

message DescribeClusterRequest {
    string cluster_name = 1;
}

message DescribeClusterResponse {
    map<string,string> supported_clients = 1;
    string server_version = 2;
    temporal.api.cluster.v1.MembershipInfo membership_info = 3;
    string cluster_id = 4;
    string cluster_name = 5;
    int32 history_shard_count = 6;
    string persistence_store = 7;
    string visibility_store = 8;
    temporal.api.version.v1.VersionInfo version_info = 9;
    int64 failover_version_increment = 10;
    int64 initial_failover_version = 11;
    bool is_global_namespace_enabled = 12;
}

message ListClustersRequest {
    int32 page_size = 1;
    bytes next_page_token = 2;
}

message ListClustersResponse {
    repeated temporal.api.cluster.v1.ClusterMetadata clusters = 1;
    bytes next_page_token = 2;
}

message ListClusterMembersRequest {
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "within" is used to indicate a time range. --)
    google.protobuf.Duration last_heartbeat_within = 1 [(gogoproto.stdduration) = true];
    string rpc_address = 2;
    string host_id = 3;
    temporal.api.enums.v1.ClusterMemberRole role = 4;
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "after" is used to indicate a time range. --)
    google.protobuf.Timestamp session_started_after_time = 5 [(gogoproto.stdtime) = true];
    int32 page_size = 6;
    bytes next_page_token = 7;
}

message ListClusterMembersResponse {
    repeated temporal.api.cluster.v1.ClusterMember active_members = 1;
    bytes next_page_token = 2;
}
