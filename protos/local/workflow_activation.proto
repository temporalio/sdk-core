syntax = "proto3";

/**
 * Definitions of the different workflow activation jobs returned from [crate::Core::poll_task]. The
 * lang SDK applies these activation jobs to drive workflows.
 */
package coresdk.workflow_activation;

import "common.proto";
import "activity_result.proto";
import "child_workflow.proto";

import "temporal/api/failure/v1/message.proto";
import "google/protobuf/timestamp.proto";

/// An instruction to the lang sdk to run some workflow code, whether for the first time or from
/// a cached state.
message WFActivation {
    /// The id of the currently active run of the workflow. Also used as a cache key. There may
    /// only ever be one active workflow task (and hence activation) of a run at one time.
    string run_id = 1;
    /// The current time as understood by the workflow, which is set by workflow task started events
    google.protobuf.Timestamp timestamp = 2;
    /// Whether or not the activation is replaying past events
    bool is_replaying = 3;
    /// The things to do upon activating the workflow
    repeated WFActivationJob jobs = 4;
}

message WFActivationJob {
    oneof variant {
        /// Begin a workflow for the first time
        StartWorkflow start_workflow = 1;
        /// A timer has fired, allowing whatever was waiting on it (if anything) to proceed
        FireTimer fire_timer = 2;
        /// Workflow was reset. The randomness seed must be updated.
        UpdateRandomSeed update_random_seed = 4;
        /// A request to query the workflow was received.
        QueryWorkflow query_workflow = 5;
        /// A request to cancel the workflow was received.
        CancelWorkflow cancel_workflow = 6;
        /// A request to signal the workflow was received.
        SignalWorkflow signal_workflow = 7;
        /// An activity was resolved, result could be completed, failed or cancelled
        ResolveActivity resolve_activity = 8;
        /// A patch marker has been detected and lang is being told that change exists. This
        /// job is strange in that it is sent pre-emptively to lang without any corresponding
        /// command being sent first.
        NotifyHasPatch notify_has_patch = 9;
        /// A child workflow execution has started or failed to start
        ResolveChildWorkflowExecutionStart resolve_child_workflow_execution_start = 10;
        /// A child workflow was resolved, result could be completed or failed
        ResolveChildWorkflowExecution resolve_child_workflow_execution = 11;
        /// An attempt to signal an external workflow resolved
        ResolveSignalExternalWorkflow resolve_signal_external_workflow = 12;
        /// An attempt to cancel an external workflow resolved
        ResolveRequestCancelExternalWorkflow resolve_request_cancel_external_workflow = 13;
        /// Remove the workflow identified by the [WFActivation] containing this job from the cache
        /// after performing the activation.
        ///
        /// If other job variant are present in the list, this variant will be the last job in the
        /// job list. The string value is a reason for eviction.
        RemoveFromCache remove_from_cache = 50;
    }
}

/// Start a new workflow
message StartWorkflow {
    /// The identifier the lang-specific sdk uses to execute workflow code
    string workflow_type = 1;
    /// The workflow id used on the temporal server
    string workflow_id = 2;
    /// Inputs to the workflow code
    repeated common.Payload arguments = 3;
    /// The seed must be used to initialize the random generator used by SDK.
    /// RandomSeedUpdatedAttributes are used to deliver seed updates.
    uint64 randomness_seed = 4;
    /// Used to add metadata e.g. for tracing and auth, meant to be read and written to by interceptors.
    map<string, common.Payload> headers = 5;

    // TODO: Do we need namespace here, or should that just be fetchable easily?
    //   will be others - workflow exe started attrs, etc
}

/// Notify a workflow that a timer has fired
message FireTimer {
    /// Sequence number as provided by lang in the corresponding StartTimer command
    uint32 seq = 1;
}

/// Notify a workflow that an activity has been resolved
message ResolveActivity {
    /// Sequence number as provided by lang in the corresponding ScheduleActivity command
    uint32 seq = 1;
    activity_result.ActivityResolution result = 2;
}

/// Notify a workflow that a start child workflow execution request has succeeded, failed or was
/// cancelled.
message ResolveChildWorkflowExecutionStart {
    /// Sequence number as provided by lang in the corresponding StartChildWorkflowExecution command
    uint32 seq = 1;
    oneof status {
        ResolveChildWorkflowExecutionStartSuccess succeeded = 2;
        ResolveChildWorkflowExecutionStartFailure failed = 3;
        ResolveChildWorkflowExecutionStartCancelled cancelled = 4;
    }
}

/// Simply pass the run_id to lang
message ResolveChildWorkflowExecutionStartSuccess {
    string run_id = 1;
}

/// Provide lang the cause of failure
message ResolveChildWorkflowExecutionStartFailure {
    /// Lang should have this information but it's more convenient to pass it back
    /// for error construction on the lang side.
    string workflow_id = 1;
    string workflow_type = 2;
    child_workflow.StartChildWorkflowExecutionFailedCause cause = 3;
}

/// `failure` should be ChildWorkflowFailure with cause set to CancelledFailure.
/// The failure is constructed in core for lang's convenience.
message ResolveChildWorkflowExecutionStartCancelled {
  temporal.api.failure.v1.Failure failure = 1;
}

/// Notify a workflow that a child workflow execution has been resolved
message ResolveChildWorkflowExecution {
    /// Sequence number as provided by lang in the corresponding StartChildWorkflowExecution command
    uint32 seq = 1;
    child_workflow.ChildWorkflowResult result = 2;
}

/// Update the workflow's random seed
message UpdateRandomSeed {
    uint64 randomness_seed = 1;
}

/// Query a workflow
message QueryWorkflow {
    /// For PollWFTResp `query` field, this will be set to the special value `legacy`. For the
    /// `queries` field, the server provides a unique identifier. If it is a `legacy` query,
    /// lang cannot issue any commands in response other than to answer the query.
    string query_id = 1;
    /// The query's function/method/etc name
    string query_type = 2;
    repeated common.Payload arguments = 3;
}

/// Cancel a running workflow
message CancelWorkflow {
    /// Information from the cancellation request
    repeated common.Payload details = 1;
}

/// Send a signal to a workflow
message SignalWorkflow {
    string signal_name = 1;
    repeated common.Payload input = 2;
    string identity = 3;
}

// Inform lang what the result of a call to `patched` or similar API should be -- this is always
// sent pre-emptively, so any time it is sent the change is present
message NotifyHasPatch {
    string patch_id = 1;
}

message ResolveSignalExternalWorkflow {
    /// Sequence number as provided by lang in the corresponding SignalExternalWorkflowExecution
    /// command
    uint32 seq = 1;
    /// If populated, this signal either failed to be sent or was cancelled depending on failure
    /// type / info.
    temporal.api.failure.v1.Failure failure = 2;
}

message ResolveRequestCancelExternalWorkflow {
    /// Sequence number as provided by lang in the corresponding
    /// RequestCancelExternalWorkflowExecution command
    uint32 seq = 1;
    /// If populated, this signal either failed to be sent or was cancelled depending on failure
    /// type / info.
    temporal.api.failure.v1.Failure failure = 2;
}

message RemoveFromCache {
    string reason = 1;
}