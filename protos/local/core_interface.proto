syntax = "proto3";

package coresdk;

// Note: Intellij will think these imports don't work because of the slightly odd nature of
// the include paths. You can make it work by going to the "Protobuf Support" settings section
// and adding the "api_upstream" subdir as an include path.

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "dependencies/gogoproto/gogo.proto";
import "temporal/api/workflowservice/v1/request_response.proto";
import "temporal/api/taskqueue/v1/message.proto";
import "temporal/api/enums/v1/failed_cause.proto";
import "temporal/api/failure/v1/message.proto";
import "temporal/api/common/v1/message.proto";
import "temporal/api/command/v1/message.proto";

message WorkflowIdentifier {
    string namespace = 1;
    string name = 2;
}

message ActivityIdentifier {
    string namespace = 1;
    string name = 2;
}

message RegistrationReq {
    repeated WorkflowIdentifier workflows = 1;
    repeated ActivityIdentifier activities = 2;
}

service Core {
    rpc PollTask (google.protobuf.Empty) returns (Task) {}
    rpc CompleteTask (CompleteTaskReq) returns (google.protobuf.Empty) {}
    rpc RegisterImplementations (RegistrationReq) returns (google.protobuf.Empty) {}
}

message Task {
    bytes task_token = 1;
    oneof variant {
        WorkflowTask workflow = 2;
        ActivityTask activity = 3;
    }
}

message StartWorkflowTaskAttributes {
    string namespace = 1;
    string name = 2;
    temporal.api.common.v1.Payloads arguments = 3;
}

message TriggerTimerTaskAttributes {
    string timer_id = 1;
}

message WorkflowTask {
    google.protobuf.Timestamp timestamp = 1 [(gogoproto.stdtime) = true];
    string workflow_id = 2;
    oneof attributes {
        StartWorkflowTaskAttributes start_workflow = 3;
        TriggerTimerTaskAttributes trigger_timer = 4;
    }
}

message ActivityTask {
    // Original task from temporal service
    temporal.api.workflowservice.v1.PollActivityTaskQueueResponse original = 1;
}


message CompleteTaskReq {
    bytes task_token = 1;
    oneof completion {
        WorkflowTaskCompletion workflow = 2;
        ActivityTaskCompletion activity = 3;
    }
}

message WorkflowTaskCompletion {
    oneof status {
        WorkflowTaskSuccess successful = 1;
        WorkflowTaskFailure failed = 2;
    }
}

message ActivityTaskCompletion {
    oneof status {
        ActivityTaskSuccess successful = 1;
        ActivityTaskFailure failed = 2;
    }
}

message CoreCommand {
    // Reserved for  specific commands
}

message Command {
    oneof variant {
        temporal.api.command.v1.Command api = 1;
        CoreCommand core = 2;
    }
}

message WorkflowTaskSuccess {
    repeated Command commands = 1;
    // Other bits from RespondWorkflowTaskCompletedRequest as needed
}

message WorkflowTaskFailure {
    temporal.api.enums.v1.WorkflowTaskFailedCause cause = 1;
    temporal.api.failure.v1.Failure failure = 2;
    // Other bits from RespondWorkflowTaskFailedRequest as needed
}

message ActivityTaskSuccess {
    temporal.api.common.v1.Payloads result = 1;
    // Other bits from RespondActivityTaskCompletedRequest as needed
}

message ActivityTaskFailure {
    temporal.api.failure.v1.Failure failure = 1;
    // Other bits from RespondActivityTaskFailedRequest as needed
}
