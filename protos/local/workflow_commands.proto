syntax = "proto3";

/**
 * Definitions for commands from a workflow in lang SDK to core. While a workflow processes a batch
 * of activation jobs, it accumulates these commands to be sent back to core to conclude that
 * activation.
 */
package coresdk.workflow_commands;

import "common.proto";
import "child_workflow.proto";
import "google/protobuf/duration.proto";
import "temporal/api/failure/v1/message.proto";

message WorkflowCommand {
    oneof variant {
        StartTimer start_timer = 1;
        ScheduleActivity schedule_activity = 2;
        QueryResult respond_to_query = 3;
        RequestCancelActivity request_cancel_activity = 4;
        CancelTimer cancel_timer = 5;
        CompleteWorkflowExecution complete_workflow_execution = 6;
        FailWorkflowExecution fail_workflow_execution = 7;
        ContinueAsNewWorkflowExecution continue_as_new_workflow_execution = 8;
        CancelWorkflowExecution cancel_workflow_execution = 9;
        SetChangeMarker set_change_marker = 10;
        StartChildWorkflowExecution start_child_workflow_execution = 11;
        RequestCancelExternalWorkflowExecution request_cancel_external_workflow_execution = 12;
        SignalExternalWorkflowExecution signal_external_workflow_execution = 13;

        // To be added as/if needed:
        //  UpsertWorkflowSearchAttributes upsert_workflow_search_attributes_command_attributes = 14;
    }
}

message StartTimer {
    string timer_id = 1;
    google.protobuf.Duration start_to_fire_timeout = 2;
}

message CancelTimer {
    string timer_id = 1;
}

message ScheduleActivity {
    string activity_id = 1;
    string activity_type = 2;
    string namespace = 3;
    // The name of the task queue to place this activity request in
    string task_queue = 4;
    map<string, common.Payload> header_fields = 5;
    /// Arguments/input to the activity. Called "input" upstream.
    repeated common.Payload arguments = 6;
    /// Indicates how long the caller is willing to wait for an activity completion. Limits how long
    /// retries will be attempted. Either this or start_to_close_timeout_seconds must be specified.
    /// When not specified defaults to the workflow execution timeout.
    google.protobuf.Duration schedule_to_close_timeout = 7;
    /// Limits time an activity task can stay in a task queue before a worker picks it up. This
    /// timeout is always non retryable as all a retry would achieve is to put it back into the same
    /// queue. Defaults to schedule_to_close_timeout or workflow execution timeout if not specified.
    google.protobuf.Duration schedule_to_start_timeout = 8;
    /// Maximum time an activity is allowed to execute after a pick up by a worker. This timeout is
    /// always retryable. Either this or schedule_to_close_timeout must be specified.
    google.protobuf.Duration start_to_close_timeout = 9;
    /// Maximum time allowed between successful worker heartbeats.
    google.protobuf.Duration heartbeat_timeout = 10;
    /// Activities are provided by a default retry policy controlled through the service dynamic
    /// configuration. Retries are happening up to schedule_to_close_timeout. To disable retries set
    /// retry_policy.maximum_attempts to 1.
    common.RetryPolicy retry_policy = 11;
    /// Defines behaviour of the underlying workflow when activity cancellation has been requested.
    ActivityCancellationType cancellation_type = 12;
}

enum ActivityCancellationType {
    /// Initiate a cancellation request and immediately report cancellation to the workflow.
    TRY_CANCEL = 0;
    /// Wait for activity cancellation completion. Note that activity must heartbeat to receive a
    /// cancellation notification. This can block the cancellation for a long time if activity
    /// doesn't heartbeat or chooses to ignore the cancellation request.
    WAIT_CANCELLATION_COMPLETED = 1;
    /// Do not request cancellation of the activity and immediately report cancellation to the
    /// workflow
    ABANDON = 2;
}

message RequestCancelActivity {
    string activity_id = 1;
}

message QueryResult {
    /// Corresponds to the id provided in the activation job
    string query_id = 1;
    oneof variant {
        QuerySuccess succeeded = 2;
        temporal.api.failure.v1.Failure failed = 3;
    }
}

message QuerySuccess {
    common.Payload response = 1;
}

/// Issued when the workflow completes successfully
message CompleteWorkflowExecution {
    common.Payload result = 1;
}

/// Issued when the workflow errors out
message FailWorkflowExecution {
    temporal.api.failure.v1.Failure failure = 1;
}

// TODO: Maybe combine all execution resolves into one message
/// Continue the workflow as a new execution. Unless noted otherwise, unset or default field values
/// will re-use the issuing workflow's values.
message ContinueAsNewWorkflowExecution {
    /// The identifier the lang-specific sdk uses to execute workflow code
    string workflow_type = 1;
    /// Task queue for the new workflow execution
    string task_queue = 2;
    /// Inputs to the workflow code. Should be specified. Will not re-use old arguments, as that
    /// typically wouldn't make any sense.
    repeated common.Payload arguments = 3;
    /// Timeout for a single run of the new workflow.
    google.protobuf.Duration workflow_run_timeout = 4;
    /// Timeout of a single workflow task.
    google.protobuf.Duration workflow_task_timeout = 5;
    /// Memo fields
    map<string, common.Payload> memo = 6;
    /// Header fields
    map<string, common.Payload> header = 7;
    /// Search attributes
    map<string, common.Payload> search_attributes = 8;
}

/// Indicate a workflow has completed as cancelled. Generally sent as a response to an activation
/// containing a cancellation job.
message CancelWorkflowExecution {}

/// A request to set/check version information for a certain change.
message SetChangeMarker {
    // A user-chosen identifier for this version check. If the same identifier is used in multiple
    // places in the code, those places are considered to be versioned as one unit. IE: The check
    // call will return the same result for all of them
    string change_id = 1;
    // Can be set to true to indicate that branches using this change are being removed, and all
    // future worker deployments will only have the "with change" code in them.
    bool deprecated = 2;
}

/// Start a child workflow execution
message StartChildWorkflowExecution {
    string namespace = 1;
    string workflow_id = 2;
    string workflow_type = 3;
    string task_queue = 4;
    repeated common.Payload input = 5;
    /// Total workflow execution timeout including retries and continue as new.
    google.protobuf.Duration workflow_execution_timeout = 6;
    /// Timeout of a single workflow run.
    google.protobuf.Duration workflow_run_timeout = 7;
    /// Timeout of a single workflow task.
    google.protobuf.Duration workflow_task_timeout = 8;
    /// Default: PARENT_CLOSE_POLICY_TERMINATE.
    child_workflow.ParentClosePolicy parent_close_policy = 9;
    // string control = 10; (unused from StartChildWorkflowExecutionCommandAttributes)
    // Default: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
    common.WorkflowIdReusePolicy workflow_id_reuse_policy = 11;
    common.RetryPolicy retry_policy = 12;
    string cron_schedule = 13;
    /// Header fields
    map<string, common.Payload> header = 14;
    /// Memo fields
    map<string, common.Payload> memo = 15;
    /// Search attributes
    map<string, common.Payload> search_attributes = 16;
    /// Defines behaviour of the underlying workflow when child workflow cancellation has been requested.
    child_workflow.ChildWorkflowCancellationType cancellation_type = 17;
}

/// Request cancellation of an external workflow execution, can be used for child workflows
message RequestCancelExternalWorkflowExecution {
    string namespace = 1;
    /// Required workflow_id of the Workflow to cancel
    string workflow_id = 2;
    /// Optional run_id of the Workflow to cancel
    string run_id = 3;
}

/// Send a signal to an external workflow, can be used for child workflows
message SignalExternalWorkflowExecution {
    string namespace = 1;
    /// workflow_id and optional run_id
    common.WorkflowExecution workflow_execution = 2;
    /// Name of the signal handler
    string signal_name = 3;
    /// Arguments for the handler
    repeated common.Payload args = 4;
}
