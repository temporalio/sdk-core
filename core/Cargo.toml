[package]
name = "temporal-sdk-core"
version = "0.1.0"
authors = ["Spencer Judge <spencer@temporal.io>", "Vitaly Arbuzov <vitaly@temporal.io>"]
edition = "2021"
license-file = { workspace = true }
description = "Library for building new Temporal SDKs"
homepage = "https://temporal.io/"
repository = "https://github.com/temporalio/sdk-core"
keywords = ["temporal", "workflow"]
categories = ["development-tools"]

[lib]

[features]
default = ["otel"]
otel = ["dep:opentelemetry", "dep:opentelemetry_sdk", "dep:opentelemetry-otlp",
    "dep:opentelemetry-prometheus", "dep:hyper", "dep:hyper-util", "dep:http-body-util"]
tokio-console = ["console-subscriber"]
ephemeral-server = ["dep:flate2", "dep:nix", "dep:reqwest", "dep:tar", "dep:zip"]

[dependencies]
anyhow = "1.0"
async-trait = "0.1"
base64 = "0.21"
console-subscriber = { version = "0.2", optional = true }
crossbeam-channel = "0.5"
crossbeam-queue = "0.3"
dashmap = "5.5"
derive_builder = { workspace = true }
derive_more = { workspace = true }
enum_dispatch = "0.3"
enum-iterator = "2"
flate2 = { version = "1.0", optional = true }
futures = "0.3"
futures-util = "0.3"
governor = "0.6"
http-body-util = { version = "0.1", optional = true }
hyper = { version = "1.2", optional = true }
hyper-util = { version = "0.1", features = ["server", "http1", "http2", "tokio"], optional = true }
itertools = "0.12"
lru = "0.12"
mockall = "0.12"
nix = { version = "0.28", optional = true, features = ["process", "signal"] }
once_cell = { workspace = true }
opentelemetry = { workspace = true, features = ["metrics"], optional = true }
opentelemetry_sdk = { version = "0.22", features = ["rt-tokio", "metrics"], optional = true }
opentelemetry-otlp = { version = "0.15", features = ["tokio", "metrics"], optional = true }
opentelemetry-prometheus = { version = "0.15", optional = true }
parking_lot = { version = "0.12", features = ["send_guard"] }
pin-project = "1.0"
prometheus = "0.13"
prost = { workspace = true }
prost-types = { version = "0.5", package = "prost-wkt-types" }
rand = "0.8.3"
reqwest = { version = "0.11", features = ["json", "stream", "rustls-tls", "tokio-rustls"], default-features = false, optional = true }
ringbuf = "0.3"
serde = "1.0"
serde_json = "1.0"
siphasher = "1.0"
slotmap = "1.0"
tar = { version = "0.4", optional = true }
thiserror = "1.0"
tokio = { version = "1.26", features = ["rt", "rt-multi-thread", "parking_lot", "time", "fs", "process"] }
tokio-util = { version = "0.7", features = ["io", "io-util"] }
tokio-stream = "0.1"
tonic = { workspace = true, features = ["tls", "tls-roots"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["parking_lot", "env-filter", "registry"] }
url = "2.2"
uuid = { version = "1.1", features = ["v4"] }
zip = { version = "0.6.3", optional = true }
log = "0.4.20"

# 1st party local deps
[dependencies.temporal-sdk-core-api]
path = "../core-api"
features = ["otel_impls"]

[dependencies.temporal-sdk-core-protos]
path = "../sdk-core-protos"
features = ["history_builders"]

[dependencies.temporal-client]
path = "../client"

[dependencies.rustfsm]
path = "../fsm"

[dev-dependencies]
assert_matches = "1.4"
bimap = "0.6.1"
clap = { version = "4.0", features = ["derive"] }
criterion = "0.5"
rstest = "0.18"
sysinfo = "0.30"
temporal-sdk-core-test-utils = { path = "../test-utils" }
temporal-sdk = { path = "../sdk" }

[build-dependencies]
tonic-build = { workspace = true }

[[test]]
name = "integ_tests"
path = "../tests/main.rs"
# Prevents autodiscovery, and hence these getting run with `cargo test`. Run with
# `cargo test --test integ_tests`
test = false

[[test]]
name = "heavy_tests"
path = "../tests/heavy_tests.rs"
test = false

[[bench]]
name = "workflow_replay"
harness = false

# This is maybe a bit hacky, but we call the runner an "example" because that gets it compiling with
# the dev-dependencies, which we want.
[[example]]
name = "integ_runner"
path = "../tests/runner.rs"

[lints]
workspace = true
