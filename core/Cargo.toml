[package]
name = "temporal-sdk-core"
version = "0.1.0"
authors = [
    "Spencer Judge <spencer@temporal.io>",
    "Vitaly Arbuzov <vitaly@temporal.io>",
]
edition = "2024"
license-file = { workspace = true }
description = "Library for building new Temporal SDKs"
homepage = "https://temporal.io/"
repository = "https://github.com/temporalio/sdk-core"
keywords = ["temporal", "workflow"]
categories = ["development-tools"]

[lib]

[features]
default = ["otel", "prom"]
otel = [
    "dep:opentelemetry",
    "dep:opentelemetry_sdk",
    "dep:opentelemetry-otlp",
    "dep:hyper",
    "dep:hyper-util",
    "dep:http-body-util",
]
prom = ["dep:prometheus"]
tokio-console = ["console-subscriber"]
ephemeral-server = ["dep:flate2", "dep:reqwest", "dep:tar", "dep:zip"]
debug-plugin = ["dep:reqwest"]
test-utilities = ["dep:assert_matches", "dep:bimap"]

[dependencies]
anyhow = "1.0"
assert_matches = { version = "1.5", optional = true }
bimap = { version = "0.6.3", optional = true }
async-trait = "0.1"
console-subscriber = { version = "0.4", optional = true }
crossbeam-channel = "0.5"
crossbeam-queue = "0.3"
crossbeam-utils = "0.8"
dashmap = "6.1"
derive_builder = { workspace = true }
derive_more = { workspace = true }
enum_dispatch = "0.3"
enum-iterator = "2"
flate2 = { version = "1.1", optional = true }
futures-util = { version = "0.3", default-features = false }
futures-channel = { version = "0.3", default-features = false, features = [
    "std",
] }
gethostname = "1.0.2"
governor = "0.10"
http-body-util = { version = "0.1", optional = true }
hyper = { version = "1.7", optional = true }
hyper-util = { version = "0.1", features = [
    "server",
    "http1",
    "http2",
    "tokio",
], optional = true }
itertools = "0.14"
lru = "0.16"
mockall = "0.13"
opentelemetry = { workspace = true, features = ["metrics"], optional = true }
opentelemetry_sdk = { version = "0.30", features = [
    "rt-tokio",
    "metrics",
    "spec_unstable_metrics_views",
], optional = true }
opentelemetry-otlp = { version = "0.30", features = [
    "tokio",
    "metrics",
    "tls",
    "http-proto",
    "grpc-tonic",
], optional = true }
parking_lot = { version = "0.12", features = ["send_guard"] }
pid = "4.0"
pin-project = "1.1"
prometheus = { version = "0.14", optional = true }
prost = { workspace = true }
prost-types = { version = "0.6", package = "prost-wkt-types" }
rand = "0.9"
reqwest = { version = "0.12", features = [
    "json",
    "stream",
    "rustls-tls-native-roots",
], default-features = false, optional = true }
ringbuf = "0.4"
serde = "1.0"
serde_json = "1.0"
siphasher = "1.0"
slotmap = "1.0"
sysinfo = { version = "0.37", default-features = false, features = ["system"] }
tar = { version = "0.4", optional = true }
thiserror = { workspace = true }
tokio = { version = "1.47", features = [
    "rt",
    "rt-multi-thread",
    "parking_lot",
    "time",
    "fs",
    "process",
] }
tokio-util = { version = "0.7", features = ["io", "io-util"] }
tokio-stream = "0.1"
tonic = { workspace = true, features = ["tls-ring", "tls-native-roots"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3", default-features = false, features = [
    "parking_lot",
    "env-filter",
    "registry",
    "ansi",
] }
url = "2.5"
uuid = { version = "1.18", features = ["v4"] }
# Only need specific features to decompress zip files for ephemeral server download
zip = { version = "4.6", optional = true, default-features = false, features = ["deflate", "bzip2", "zstd"] }

# 1st party local deps
[dependencies.temporal-sdk-core-api]
path = "../core-api"
features = ["otel_impls"]

[dependencies.temporal-sdk-core-protos]
path = "../sdk-core-protos"
features = ["history_builders", "test-utilities"]

[dependencies.temporal-client]
path = "../client"

[dependencies.rustfsm]
path = "../fsm"

[dev-dependencies]
assert_matches = "1.5"
bimap = "0.6.3"
bytes = "1.10"
clap = { version = "4.5", features = ["derive"] }
criterion = { version = "0.7", features = ["async", "async_tokio"] }
rstest = "0.26"
semver = "1.0"
temporal-sdk = { path = "../sdk" }
tokio = { version = "1.47", features = [
    "rt",
    "rt-multi-thread",
    "parking_lot",
    "time",
    "fs",
    "process",
    "test-util",
] }
tokio-stream = { version = "0.1", features = ["net"] }

[[test]]
name = "integ_tests"
path = "../tests/main.rs"
# Prevents autodiscovery, and hence these getting run with `cargo test`. Run with
# `cargo test --test integ_tests`
test = false
required-features = [
    "temporal-sdk-core-protos/serde_serialize",
    "test-utilities",
    "ephemeral-server",
]

[[test]]
name = "heavy_tests"
path = "../tests/heavy_tests.rs"
test = false
required-features = ["test-utilities"]

[[test]]
name = "manual_tests"
path = "../tests/manual_tests.rs"
test = false
required-features = ["test-utilities"]

[[test]]
name = "global_metric_tests"
path = "../tests/global_metric_tests.rs"
test = false
required-features = ["test-utilities"]

[[test]]
name = "cloud_tests"
path = "../tests/cloud_tests.rs"
test = false
required-features = ["test-utilities"]

[[bench]]
name = "workflow_replay"
path = "../tests/workflow_replay_bench.rs"
harness = false

# The integration test runner should compile with the same configuration as the
# rest of the integration tests so that artifacts are shared and no additional
# compilation is required when switching between using the runner and running
# tests directly.
[[test]]
name = "integ_runner"
path = "../tests/runner.rs"
harness = false
test = false
required-features = [
    "temporal-sdk-core-protos/serde_serialize",
    "test-utilities",
    "ephemeral-server",
]


[lints]
workspace = true
